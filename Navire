package batailleNavale;

public class Navire {
	
	/***************************************************
	 * 					ATTRIBUTS
	 **************************************************/
	
	private Coordonnee debut;
	private Coordonnee fin;
	private Coordonnee[] partiesTouchees;
	private int nbTouchees;
	
	/***************************************************
	 * 		CONSTRUCTEURS
	 **************************************************/
	
	public Navire(Coordonnee debut, int longueur, boolean estVertical) {
		if (estVertical) {
			if (longueur + debut.getLigne() > 25) {
				throw new IllegalArgumentException("Le bateau dépasse de la grille !");
			}
			else {
			this.debut = new Coordonnee(debut.getColonne(), debut.getLigne());
			this.fin = new Coordonnee(this.debut.getColonne(),longueur + this.debut.getLigne());
		
			}
		}
		else {
			if (longueur + debut.getColonne() > 25) {
				throw new IllegalArgumentException("Le bateau dépasse de la grille !");
			}
			else {
			this.debut = new Coordonnee(debut.getColonne(), debut.getLigne());
			this.fin = new Coordonnee(longueur + this.debut.getColonne(), this.debut.getLigne());
			}
		}
	}
	
	/***************************************************
	 * 		METHODES
	 **************************************************/
	
	public String toString() {
		int colonne = fin.getColonne() - debut.getColonne();
		int ligne = fin.getLigne() - debut.getLigne();
		if (colonne == 0)
			return("Navire(" + this.debut.toString() + ", " + ligne +", "+ " vertical)");
		else 
			return("Navire(" + this.debut.toString() + ", " + colonne +", "+ " horizontal)");
	}
	
	
	/***************************************************
	 * 		GETTERS
	 **************************************************/
	
	public Coordonnee getDebut() {
		return this.debut;
	}
	
	public Coordonnee getFin() {
		return this.fin;
	}
	
	/***************************************************
	 * 		METHODES
	 **************************************************/
	
	public boolean contient(Coordonnee c) {
		int colonne = fin.getColonne() - debut.getColonne();
		int ligne = fin.getLigne() - debut.getLigne();
		if (colonne == 0 && c.getLigne() >= this.debut.getLigne() && c.getLigne() <= this.fin.getLigne()) //navire horizontal
			return true;
		else if (ligne == 0 && c.getColonne() >= this.debut.getColonne() && c.getColonne() <= this.fin.getColonne()) //navire vertical
			return true;
		else 
			return false;
	}
	
	public boolean touche(Navire n) {
		if (this.debut.voisine(n.debut) || this.fin.voisine(n.fin))
			return true;
		else
			return false;
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Coordonnee deb1 = new Coordonnee(0,0);
		Navire nav1 = new Navire(deb1,2,false);
		Coordonnee deb2 = new Coordonnee(1,0);
		Navire nav2 = new Navire(deb2,2,false);
		
		System.out.println(nav1.touche(nav2));
	}

}
